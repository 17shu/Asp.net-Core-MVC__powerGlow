
<div class="title">
    <i class="bi bi-list sidebarIcon" onclick="sideBarClicked()"></i>
    <h2>Real-Time Power and Energy Charts</h2>
</div>


<div style="display: flex; flex-direction: column;">
    <!-- 第一排 -->
    <div style="display: flex;" class="formStyle">
        <div class="card mt-3  mr-3 flex: 1;">
            <div class="card-header custom-card">
                Power Chart
            </div>
            <div class="card-body pr-10">
                <canvas id="powerChart" width="800" height="500"></canvas>
            </div>
        </div>
        <div class="card mt-3  ml-3 flex: 1;">
            <div class="card-header custom-card">
                Power Event Bar Chart
            </div>
            <div class="card-body pr-10">
                <canvas id="powerBarChart" width="400" height="500"></canvas>
            </div>
        </div>
    </div>
    <!-- 第二排 -->
    <div style="display: flex; margin-top: 20px;" class="formStyle">
        <div class="card mt-3  mr-3 flex: 1;">
            <div class="card-header custom-card">
                Energy Chart
            </div>
            <div class="card-body pr-10">
                <canvas id="energyChart" width="800" height="500"></canvas>
            </div>
        </div>
        <div class="card mt-3  ml-3 flex: 1;">
            <div class="card-header custom-card">
                Energy Event Bar Chart
            </div>
            <div class="card-body pr-10">
                <canvas id="energyBarChart" width="400" height="500"></canvas>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script>
        let currentMinute = 420;
        let energyCurrentMinute = 420;
        let isFetchingPower = false;
        let isFetchingEnergy = false;

        // Power chart setup
        var powerChartCanvas = document.getElementById('powerChart').getContext('2d');
        var powerChart = new Chart(powerChartCanvas, {
            type: 'line',
            data: {
                datasets: []
            },
            options: {
                scales: {
                    x: {
                        type: 'linear',
                        title: {
                            display: true,
                            text: 'Minutes'
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Energy chart setup
        var ctx = document.getElementById('energyChart').getContext('2d');
        var energyChart = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: []
            },
            options: {
                scales: {
                    x: {
                        type: 'linear',
                        title: {
                            display: true,
                            text: 'Minutes'
                        }
                    },
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Power Bar chart setup
        var powerBarChartCanvas = document.getElementById('powerBarChart').getContext('2d');
        var powerBarChart = new Chart(powerBarChartCanvas, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Power Data',
                    data: [],
                    backgroundColor: 'rgba(0, 102, 51, 0.6)'
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });

        // Energy Bar chart setup
        var energyBarChartCanvas = document.getElementById('energyBarChart').getContext('2d');
        var energyBarChart = new Chart(energyBarChartCanvas, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Energy Data',
                    data: [],
                    backgroundColor: '#1B4F72'
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });



        //  chart update function
        async function updateCharts() {
            if (isFetchingPower || isFetchingEnergy) return;

            // 设置标识符以防止重复请求
            isFetchingPower = true;
            isFetchingEnergy = true;

            try {
                // 获取 power 数据
                let powerResponse = await fetch(`http://192.168.8.190/api/Products/fetchpowerdata?currentMinute=${currentMinute}`);
                    let powerData = await powerResponse.json();
                // console.log('PowerData received:', powerData);

                // 更新 powerChart
                if (powerData.length > 0) {
                    powerData.forEach(item => {
                        let dataset = powerChart.data.datasets.find(ds => ds.label === item.name);

                        if (!dataset) {
                            dataset = {
                                label: item.name,
                                data: [],
                                borderColor: getRandomColor(),
                                fill: false,
                                pointBackgroundColor: [],
                                pointRadius: []
                            };
                            powerChart.data.datasets.push(dataset);
                        }

                        // 確保資料點存在於 dataset
                        const exists = dataset.data.some(point => point.x === currentMinute);

                        if (!exists) {
                            dataset.data.push({
                                x: currentMinute,
                                y: item.value
                            });
                        }

                        // 標註 power event
                        if (item.powerEventStatus === 'powerevent') {
                            dataset.pointBackgroundColor.push('rgba(0,102,51,1)');
                            dataset.pointRadius.push(5);
                            let powerBarData = [];

                            powerData.forEach(item => {
                                powerBarData.push({
                                    name: item.name,
                                    value: item.value
                                });
                            });

                            powerBarData.sort((a, b) => b.value - a.value);

                            powerBarChart.data.labels = powerBarData.map(item => item.name);
                            powerBarChart.data.datasets[0].data = powerBarData.map(item => item.value);

                        } else {
                            dataset.pointBackgroundColor.push('rgba(0, 0, 0, 0.2)');
                            dataset.pointRadius.push(3);
                        }
                    });

                    powerChart.update();
                    powerBarChart.update();


                }

                // 获取 energy 数据
                let energyResponse = await fetch(`http://192.168.8.190/api/Products/fetchenergydata?currentMinute=${currentMinute}`);
                    let energyData = await energyResponse.json();
                console.log('EnergyData received:', energyData);

                // 更新 energyChart
                if (energyData.length > 0) {
                    energyData.forEach(item => {
                        let dataset = energyChart.data.datasets.find(ds => ds.label === item.name);

                        if (!dataset) {
                            dataset = {
                                label: item.name,
                                data: [],
                                borderColor: getRandomColor(),
                                fill: false,
                                pointBackgroundColor: [],
                                pointRadius: []
                            };
                            energyChart.data.datasets.push(dataset);
                        }

                        const exists = dataset.data.some(point => point.x === currentMinute);

                        if (!exists) {
                            dataset.data.push({
                                x: currentMinute,
                                y: item.value
                            });
                        }
                        // 標註 energy event
                        if (item.energyEventStatus === 'energyevent') {
                            dataset.pointBackgroundColor.push('#1B4F72');
                            dataset.pointRadius.push(5);
                            // 更新 energyBarChart
                            let energyBarData = [];
                            energyData.forEach(item => {
                                energyBarData.push({
                                    name: item.name,
                                    value: item.value
                                });
                            });

                            energyBarData.sort((a, b) => b.value - a.value);

                            energyBarChart.data.labels = energyBarData.map(item => item.name);
                            energyBarChart.data.datasets[0].data = energyBarData.map(item => item.value);

                        } else {
                            dataset.pointBackgroundColor.push('rgba(0, 0, 0, 0.2)');
                            dataset.pointRadius.push(3);
                        }
                    });

                    energyChart.update();
                    energyBarChart.update();
                }

            } catch (error) {
                console.error('Error fetching or updating charts:', error);
            } finally {
                // 重置标识符
                isFetchingPower = false;
                isFetchingEnergy = false;
            }

            // 增加当前分钟数
            currentMinute += 1;
        }


        // 每秒调用 updateCharts 函数更新图表
        setInterval(updateCharts, 1000);

        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }

            // 將十六進位色碼轉換為 rgba 格式，並設置透明度為 0.6
            const r = parseInt(color.slice(1, 3), 16);
            const g = parseInt(color.slice(3, 5), 16);
            const b = parseInt(color.slice(5, 7), 16);

            return `rgba(${ r }, ${ g }, ${ b }, 0.6)`;
        }

    </script>
}