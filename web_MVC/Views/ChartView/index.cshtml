<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="~/css/site.css" />
</head>
<body>
    <h2>Power Data Chart</h2>
    <div class="chartDiv">
        <div>
            <canvas id="powerDataChart"></canvas>
        </div>
        <div>
            <canvas id="powerShowChart"></canvas>
        </div>
        
    </div>
    <div style="display:inline-flex">
        <h2>Energy Data Chart</h2>
        <b>count per 15 mins</b>
    </div>
    
    <div class="chartDiv">
        <div>
            <canvas id="energyDataChart"></canvas>
        </div>
        <div>
            <canvas id="energyShowChart"></canvas>
        </div>
        
    </div>

    @section Scripts {
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

        <script>
            $(document).ready(function () {
                const powerChartContext = document.getElementById('powerDataChart').getContext('2d');
                const energyChartContext = document.getElementById('energyDataChart').getContext('2d');
                const powerShowContext = document.getElementById('powerShowChart').getContext('2d');
                const energyShowContext = document.getElementById('energyShowChart').getContext('2d');
                const powerDataChartCanvas = document.getElementById('powerDataChart');
                const powerShowChartCanvas = document.getElementById('powerShowChart');
                const energyDataChartCanvas = document.getElementById('energyDataChart');
                const energyShowChartCanvas = document.getElementById('energyShowChart');

                powerDataChartCanvas.height = 550;
                powerDataChartCanvas.width = 1000;
                powerShowChartCanvas.height = 500;
                powerShowChartCanvas.width = 600;
                energyDataChartCanvas.height = 500;
                energyDataChartCanvas.width = 1000;
                energyShowChartCanvas.height = 500;
                energyShowChartCanvas.width = 600;


                let powerChart = new Chart(powerChartContext, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: []
                    },
                    options: {
                        scales: {
                            x: {
                                type: 'linear',
                                title: {
                                    display: true,
                                    text: 'Minutes'
                                }
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });

                let energyChart = new Chart(energyChartContext, {
                    type: 'bar',
                    data: {
                        labels: [],
                        datasets: []
                    },
                    options: {
                        scales: {
                            x: {
                                stacked: true,
                                title: {
                                    display: true,
                                },
                                grid: {
                                    display: true,
                                    drawBorder: false,
                                    color: function (context) {
                                        return context.tick && context.tick.label ? '#e0e0e0' : 'transparent';
                                    }
                                }
                            },
                            y: {
                                beginAtZero: false,
                                stacked: true,
                                grid: {
                                    display: true
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false,
                            }
                        },
                    }
                });

               
                
                var powerShow = new Chart(powerShowContext, {
                    type: 'bar',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'Power Data',
                            data: [],
                            backgroundColor: '#145A32'
                        }]
                    },
                    options: {
                        indexAxis: 'y', // 設置為水平條形圖
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });


                var energyShow = new Chart(energyShowContext, {
                    type: 'bar', // 使用柱狀圖類型
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'Energy Data',
                            data: [],
                        }]
                    },
                    options: {
                        indexAxis: 'y', // 設置為水平條形圖
                        responsive: true,
                        scales: {
                            x: {
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });

                const powerDataStore = {};
                const energyDataStore = {};
                let powerShowStore = {}; // 現在只初始化一次
                const energyShowStore = {};
                let currentMin = 419;

                function updateChart(chart, dataStore, data) {
                    const labels = new Set(chart.data.labels);
                    const newPowerShowStore = {}; // 每次更新重置

                    data.forEach(item => {
                        const baseName = item.name.split('_')[0];
                        const date = new Date(item.datetime);
                        const minutes = date.getHours() * 60 + date.getMinutes();

                        labels.add(minutes);

                        if (!dataStore[baseName]) {
                            dataStore[baseName] = {
                                label: baseName,
                                data: [],
                                borderColor: getRandomColor(),
                                borderWidth: 1,
                                fill: false
                            };
                            chart.data.datasets.push(dataStore[baseName]);
                        }

                        if (!newPowerShowStore[baseName]) {
                            newPowerShowStore[baseName] = {
                                label: baseName,
                                data: [],
                                backgroundColor: '#0066CC'
                            };
                        }

                        dataStore[baseName].data.push({
                            x: minutes,
                            y: item.value
                        });

                        newPowerShowStore[baseName].data.push({
                            x: item.value,
                            y: baseName
                        });
                    });

                    chart.data.labels = Array.from(labels).sort((a, b) => a - b);
                    chart.update();

                    // 更新 powerShow 的數據
                    powerShow.data.datasets = Object.values(newPowerShowStore).map(dataset => ({
                        label: dataset.label,
                        data: dataset.data.sort((a, b) => b.x - a.x),
                        backgroundColor: dataset.backgroundColor
                    }));

                    powerShow.data.datasets.sort((a, b) => {
                        if (a.data.length === 0 || b.data.length === 0) return 0;
                        return b.data[0].x - a.data[0].x;
                    });
                    powerShow.update();

                    // 更新全局 powerShowStore 以備下次更新
                    powerShowStore = newPowerShowStore;
                }

                function updateEnergyChart(chart, dataStore, data) {
                    const interval = 15;
                    const intervalColors = {};
                    const passMin = currentMin - 420;

                    data.forEach(item => {
                        const baseName = item.name.split('_')[0];
                        const date = new Date(item.datetime);
                        const intervalKey = Math.floor(passMin / interval) * interval;

                        if (!dataStore[baseName]) {
                            dataStore[baseName] = {
                                label: baseName,
                                data: [],
                                backgroundColor: [],
                            };
                            chart.data.datasets.push(dataStore[baseName]);
                        }

                        if (!intervalColors[intervalKey]) {
                            intervalColors[intervalKey] = getRandomColor();
                        }

                        if (!dataStore[baseName].totalCount) {
                            dataStore[baseName].intervals = {};
                            dataStore[baseName].totalCount = 0;
                        }

                        if (!dataStore[baseName].intervals[intervalKey]) {
                            dataStore[baseName].intervals[intervalKey] = 0;
                        }

                        if (!energyShowStore[baseName]) {
                            energyShowStore[baseName] = {
                                label: baseName,
                                data: [],
                                backgroundColor: '#0066CC'
                            };
                            energyShow.data.datasets.push(energyShowStore[baseName]);
                        }

                        if (passMin % interval === 0 && passMin != 0) {
                            dataStore[baseName].totalCount += item.value;

                            dataStore[baseName].data.push({
                                x: baseName,
                                y: dataStore[baseName].totalCount,
                            });
                            dataStore[baseName].backgroundColor.push(intervalColors[intervalKey]);

                            energyShowStore[baseName].data = [];
                            energyShowStore[baseName].data.push({
                                x: item.value,
                                y: baseName
                            });

                            if (intervalKey != 0) {
                                chart.data.datasets.forEach(dataset => {
                                    dataset.data.sort((a, b) => b.y - a.y);
                                });
                            }
                        }
                    });

                    chart.update();
                    energyShow.update();
                }

                function getRandomColor() {
                    const letters = '0123456789ABCDEF';
                    let color = '#';
                    for (let i = 0; i < 6; i++) {
                        color += letters[Math.floor(Math.random() * 16)];
                    }
                    return color;
                }

                async function fetchPowerData() {
                    const response = await fetch(`/api/Api/GetPowerData?minuteOfDay=${currentMin}`);
                    const data = await response.json();
                    updateChart(powerChart, powerDataStore, data);
                }

                async function fetchEnergyData() {
                    const response = await fetch(`/api/Api/GetEnergyData?minuteOfDay=${currentMin}`);
                    const data = await response.json();
                    updateEnergyChart(energyChart, energyDataStore, data);
                }

                function refreshData() {
                    currentMin += 1;
                    fetchPowerData();
                    fetchEnergyData();
                }

                setInterval(refreshData, 1500);
                refreshData();
            });
        </script>
    }
</body>
</html>
