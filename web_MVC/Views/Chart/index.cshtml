@model web_MVC.Models.ChartViewModel


@{
    ViewData["Title"] = "Chart Data";
    Layout = "_Layout";
}
<html>

    <head>
    
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" rel="stylesheet">
        <link rel="stylesheet" href="~/css/site.css" type="text/css">
    </head>

    <div class="title">
        <i class="bi bi-list sidebarIcon" onclick="sideBarClicked()"></i>
        <h2>PowerGlow Interactive Data Query System</h2>
    </div>


    <body>
  

        <form id="chartForm" asp-action="LoadData" asp-controller="Chart" method="post" class="formStyle">
            <div class="optionDiv">
                <label for="SelectedOption">Option:</label>
                <select asp-for="SelectedOption" asp-items="@(new SelectList(new List<string> { "power", "energy", "Mix" }))">
                    <option value="">Select Option</option>
                </select>
            </div>
            <div class="optionDiv">
                <label for="SelectedChartType">Chart Type:</label>
                <select asp-for="SelectedChartType" asp-items="@(new SelectList(new List<string> { "line", "bar", "Mix" }))">
                    <option value="">Select Type</option>
                </select>
            </div>

            <div class="optionDiv">
                <label for="StartDate">Start Date:</label>
                <input asp-for="StartDate" type="date" />
            </div>
            <div class="optionDiv">
                <label for="EndDate">End Date:</label>
                <input asp-for="EndDate" type="date" />
            </div>
            <div class="optionDiv">
                <label for="SelectedName">Name:</label>
                <select asp-for="SelectedNames" asp-items="@(new SelectList(Model.Names))"></select>
            </div>

        <button class="btn btn-dark searchBtn" type="submit"><i class="bi bi-search"></i></button>

        </form>




        <div id="chartContainer" class="chartStyle">
            <!-- Chart will be rendered here -->
        </div>
        <div class="tableStyle">
            <div id="powerTableContainer">
                <h3>Power Data</h3>
                <table id="powerDataTable" border="1" class="powerTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                            <th>Datetime</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Power data rows will be appended here -->
                    </tbody>
                </table>
            </div>

            <div id="energyTableContainer">
                <h3>Energy Data</h3>
                <table id="energyDataTable" border="1" class="energyTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Value</th>
                            <th>Datetime</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Energy data rows will be appended here -->
                    </tbody>
                </table>
            </div>
        </div>



    </body>
    
            
        

    
</html>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
      
       
        $(document).ready(function () {
                   $('#chartForm').submit(function (e) {
        e.preventDefault(); // 阻止表单的默认提交行为

        // 使用 serializeArray() 获取表单数据，并转换为对象
        var formDataArray = $(this).serializeArray();
        var formData = {};
        $.each(formDataArray, function () {
            formData[this.name] = this.value;
        });

        console.log("Form Data:", formData);

        if(formData.SelectedOption == "Mix"){
          fetchMix("Mix",formData.StartDate, formData.EndDate, formData.SelectedNames);
        }
        else{
            fetchData(formData.SelectedOption, formData.StartDate, formData.EndDate, formData.SelectedNames);
        }
        
        
    });
     async function fetchMix(option,dateS, dateE, name){
         var response = await fetch(`api/Api/GetPowerHis?dateeS=${dateS}&dateE=${dateE}&name=${name}`);
         var data = await response.json();
         var response1 = await fetch(`api/Api/GetEnergy?dateeS=${dateS}&dateE=${dateE}&name=${name}`);
         var data1 = await response1.json();
         renderPowerTable(data);
         renderEnergyTable(data1);
         var datas = data.concat(data1);
         renderChart(datas,$('#SelectedChartType').val(), option);
    }
    function fetchData(option, dateS, dateE, name) {
        var type = "GetPowerHis";
        if (option == "energy" || option == "Mix") type = "GetEnergyHis";
        var apiurl = `/api/Api/${type}`;
        console.log("API: "+apiurl);
        $.ajax({
            url: apiurl,
            type: 'GET',
            data: {
                dateS: dateS,
                dateE: dateE,
                name: name
            },
            success: function (data) {
                console.log('Data received from server:', data);
                if (data && Array.isArray(data)) {
                        renderChart(data, $('#SelectedChartType').val(), option);
                        renderPowerTable(data);
                        renderEnergyTable(data);
                } else {
                    console.error('Unexpected data format received:', data);
                }
            },
            error: function (error) {
                console.error('Error during AJAX request:', error);
            }
        });
    }
           

            function renderChart(data, selectedChartType, option) {
                 $('#chartContainer').empty();
               
                var labels = [];
                var datasets = [];
                var minDate = null;
                var maxDate = null;
                console.log('selected  ' + selectedChartType);

                if (!data || !Array.isArray(data)) {
                    console.error('Invalid data:', data);
                    return;
                }

                var powerData = data.filter(item => item.name && item.name.includes('_Demand_KW'));
                var energyData = data.filter(item => item.name && item.name.includes('_KWH'));

                if (option == 'power' || option == 'Mix') {
                    minDate = powerData[0].datetime;
                    maxDate = powerData[powerData.length - 1].datetime;
                } else {
                    minDate = energyData[0].datetime;
                    maxDate = energyData[energyData.length - 1].datetime;
                }

                console.log('min:' + minDate);
                console.log('max:' + maxDate);

                // 處理 powerData
                powerData.forEach(function (item) {
                    var chartType = selectedChartType;
                    if (selectedChartType == 'Mix') chartType = 'line';

                    if (!labels.includes(item.datetime)) {
                        labels.push(item.datetime);
                    }

                    var dataset = datasets.find(d => d.label === item.name);
                    if (!dataset) {
                        dataset = {
                            label: item.name,
                            data: [],
                            borderColor: getRandomColor(),
                            backgroundColor: getRandomColor(),
                            fill: false,
                            pointBackgroundColor: [],
                            pointBorderColor: [],
                            pointRadius: [],
                            type: chartType
                        };
                        datasets.push(dataset);
                    }
                    dataset.data.push({ x: item.datetime, y: item.value });
                    dataset.pointBackgroundColor.push('rgba(22, 22, 0, 0.1)');
                    dataset.pointBorderColor.push('rgba(10, 10, 100, 1)');
                    dataset.pointRadius.push(5);
                });

                // 處理 energyData，在 Mix 模式下忽略 energyData 的原始 X 值，使用 powerData 的日期
                energyData.forEach(function (item, index) {
                    var chartType = selectedChartType;
                    if (selectedChartType == "Mix") chartType = 'bar';

                    var correspondingPowerData = powerData[index]; // 根據 index 找到對應的 powerData
                    var xValue = option == 'Mix' && correspondingPowerData ? correspondingPowerData.datetime : item.datetime;

                    if (!labels.includes(xValue) && option != 'Mix') {
                        labels.push(xValue);
                    }

                    var dataset = datasets.find(d => d.label === item.name);
                    if (!dataset) {
                        dataset = {
                            label: item.name,
                            data: [],
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: getRandomColor(),
                            fill: false,
                            yAxisID: 'y-axis-2',
                            type: chartType,
                            pointBackgroundColor: [],
                            pointBorderColor: [],
                            pointRadius: []
                        };
                        datasets.push(dataset);
                    }
                    dataset.data.push({ x: xValue, y: item.value });
                    dataset.pointBackgroundColor.push('rgba(255, 99, 132, 0.5)');
                    dataset.pointBorderColor.push('rgba(255, 99, 132, 1)');
                    dataset.pointRadius.push(5);
                });

                var ctx = document.createElement('canvas');
                $('#chartContainer').append(ctx);

                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: datasets
                    },
                    options: {
                        scales: {
                            x: {
                                min: minDate,
                                max: maxDate,
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true,
                                position: 'left'
                            },
                            'y-axis-2': {
                                type: 'linear',
                                position: 'right',
                                beginAtZero: true,
                                grid: {
                                    drawOnChartArea: false
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        var label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        label += context.raw.y;
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }



            // table setting 



            function renderPowerTable(data) {
                var powerTableBody = $('#powerDataTable tbody');
                powerTableBody.empty();

                var powerData = data.filter(item => item.name && item.name.includes('_Demand_KW'));
                powerData.forEach(function (item) {
                    var row = '<tr>' +
                        '<td>' + item.name + '</td>' +
                        '<td>' + item.value + '</td>' +
                        '<td>' + new Date(item.datetime).toLocaleString() + '</td>' +
                        '</tr>';
                    powerTableBody.append(row);
                });
            }

            function renderEnergyTable(data) {
                var energyTableBody = $('#energyDataTable tbody');
                energyTableBody.empty();

                var energyData = data.filter(item => item.name && item.name.includes('_KWH'));
                energyData.forEach(function (item) {
                    var row = '<tr>' +
                        '<td>' + item.name + '</td>' +
                        '<td>' + item.value + '</td>' +
                        '<td>' + new Date(item.datetime).toLocaleString() + '</td>' +
                        '</tr>';
                    energyTableBody.append(row);
                });
            }

            function getRandomColor() {
                var letters = '0123456789ABCDEF';
                var color = '#';
                for (var i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                return color;
            }

         
        });
    </script>

    
}
