@model web_MVC.Models.ChartViewModel;
<!DOCTYPE html>
<html>
<head>
    <title>History Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" type="text/css">
</head>
<body>
    <div class="title">
        <i class="bi bi-list sidebarIcon" onclick="sideBarClicked()"></i>
        <h2>History Analyze</h2>
    </div>
    <div class="formStyle">
        <div>
            <p class="fontStyle">Tool Options : </p>

            <div class="toolOption">

                <div class="form-check" style="margin-left:8px;">
                    <input class="form-check-input" type="checkbox" value="all" id="flexCheckChecked_all">
                    <label class="form-check-label" for="flexCheckChecked">
                        Select ALL
                    </label>
                </div>
                @foreach (var name in Model.Names)
                {
                    <div class="form-check" style="margin-left:8px;">
                        <input class="form-check-input single" type="checkbox" value="@name">
                        <label class="form-check-label" for="flexCheckChecked">
                            @("  " + name)
                        </label>
                    </div>
                }
            </div>
        </div>

        <div>
            <p>Date Time :</p>
            <input type="date" class="form-control dateStyle" id="date" name="date" />
        </div>
       


        
        <button type="button" class="btn btn-dark searchBtn" onclick="LoadData()"><i class="bi bi-search"></i></button>
      
    </div>
  
   

    <div>
        <div id="loadDiv" style="display:none">
            @await Html.PartialAsync("_Loading")
        </div>
        <div>
            <div class="chartStyle">
                <div id="historyPowerChart" style="width:100%"></div>
            </div>
            
            <div id="historyPowerTable"></div>
        </div>
        <div>
            <div class="chartStyle">
                <div id="historyEnergyChart" style="width:100%"></div>
            </div>
           
            <div id="historyEnergyTable"></div>
        </div>
        
    </div>
  
    @section Scripts {
        @Html.Partial("_Windows")
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
        <script>
            var tools = '';
            function showLoading() {
                console.log('loading..................');
                $("#loadDiv").show();
            }

            function hideLoading() {
                $("#loadDiv").hide();
            }
            var tools;
            async function LoadData() {
                $('#chartTitle').hide();
                showLoading();

                var checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
                var toolOption = [];

                if (checkboxes[0].value == 'all') {
                    toolOption = @Html.Raw(Json.Serialize(Model.Names));
                } else {
                    checkboxes.forEach(function (checkbox) {
                        toolOption.push(checkbox.value);
                    });
                }

                console.log(toolOption);

                var selectedTools = toolOption.map(option => `'${option}_Demand_KW'`);
                var tools_p = selectedTools.join(","); 

                selectedTools = toolOption.map(option => `'${option}_KWH'`);
                var tools_en = selectedTools.join(",");

                selectedTools = toolOption.map(option => `'${option}'`);
                var toolsS = selectedTools.join(",");
                tools = toolsS;

               
                var formattedDate = date.value; // 格式化日期字符串

                try {
                    var powerR = await fetch(`/api/Api/GetPowerHistory?date=${formattedDate}&name=${tools_p}`);
                    var powerData = await powerR.json();
                    renderChart(powerData, 'Power');

                    var energyR = await fetch(`/api/Api/GetEnergyHistory?date=${formattedDate}&name=${tools_en}`);
                    var energyData = await energyR.json();
                    renderChart(energyData, 'Energy');

                    renderTable(toolsS);

                    if (energyData && powerData) {
                        hideLoading();
                    }
                } catch (error) {
                    console.error('Error fetching data:', error);
                    hideLoading(); // 确保在出现错误时隐藏加载状态
                }
            }


            function getRandomColor(use) {
                var colors = [
                    "#7AFEC6", "#FFE153", "#B7FF4A", "#C4C400", "#A5A552", "#FFD1A4",
                    "#01814A", "#5B5B5B", "#EAC100", "#B8B8DC", "#5E005E", "#007500",
                    "#AE57A4", "#8CEA00", "#FFFF6F", "#FFC1E0", "#C4C400", "#842B00",
                    "#CF9E9E", "#5CADAD", "#252525"
                ];

                
                return colors[use];
            }

            async function renderChart(data, chartType) {
                $('#chartTitle').show(); $('#chartTitle').show();
                var container = chartType === 'Power' ? PowerHis : EnergyHis;
                container.innerHTML = ''; // 清空已有的 canvas 元素

                console.log("Rendering chart...");
                var Labels = [];
                var datasets = [];
                var use = 0;
                var minDate = data[0].datetime;
                var maxDate = data[data.length - 1].datetime;
                var color = getRandomColor(use);
                var increaseColor = '#FF0000';
                var decreaseColor = '#0066CC';

                    data.forEach(function (item) {
                        var t = 0.1;
                        if (!Labels.includes(item.datetime)) {
                            Labels.push(item.datetime);
                        }

                        var dataset = datasets.find(d => d.label === item.name);
                        if (!dataset) {
                            color = getRandomColor(use++);
                            dataset = {
                                label: item.name,
                                data: [],
                                borderColor: color,
                                backgroundColor: color,
                                fill: false,
                                pointBackgroundColor: [],
                                pointBorderColor: [],
                                pointRadius: [],
                                diff:[]
                            };
                            datasets.push(dataset);
                        }
                        var linecolor;
                        if (item.color != "") {
                            linecolor = item.color;
                            t = 1;
                        }
                        else{
                            linecolor = dataset.borderColor;
                            t = 0.1;
                        }
                        dataset.data.push({ x: item.datetime, y: item.value });
                        dataset.pointBackgroundColor.push(hexToRgba(linecolor, t));
                        dataset.pointBorderColor.push(linecolor);
                        dataset.pointRadius.push(3.5);
                        dataset.diff.push(item.diff);
                    });

                

                
                
                    var ctx = document.createElement('canvas');
                    container.appendChild(ctx);

                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: Labels,
                        datasets: datasets
                    },
                    options: {
                        scales: {
                            x: {
                                min: minDate,
                                max: maxDate,
                                beginAtZero: true
                            },
                            y: {
                                beginAtZero: true,
                            },
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        var label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        label += context.raw.y;
                                        return label;
                                    }
                                }
                            }
                         
                        },
                        onClick: (event, elements, chart) => {
                            if (elements.length > 0) {
                                const i = elements[0].index;
                                const selectedTime = chart.data.labels[i];

                                // 過濾出相同時間點的所有資料
                                const filteredData = chart.data.datasets.map(dataset => {
                                    const dataPoint = dataset.data.find(d => d.x === selectedTime);
                                    const diffIndex = dataset.data.indexOf(dataPoint); // 找到對應的索引
                                    return {
                                        name: dataset.label,
                                        value: dataPoint ? dataPoint.y : null, // 如果找不到則返回 null
                                        diff: diffIndex !== -1 ? dataset.diff[diffIndex] : null // 正確匹配 diff 值
                                    };
                                });

                                $('#modalLabel').text(selectedTime);
                                $('#windowsContainer').data('filteredData', filteredData);
                                renderPieChart(filteredData);
                                renderEventTable(tools,selectedTime);
                                $("#windowsContainer").modal("show");
                                
                                // 顯示模態框
                                
                            }

                        }
                    }
                });
                
            }
            async function renderTable(tools){
                var response = await fetch(`/api/Api/GetEvent?table=di_schemas.powerevent&name=${tools}&time=${date.value}`);
                const powerdata = await response.json();
                var response2 = await fetch(`/api/Api/GetEvent?table=di_schemas.energyevent&name=${tools}&time=${date.value}`);
                const energydata = await response2.json();

                var container = powerTable;
                var container2 = energyTable;
                container.innerHTML = "";
                container2.innerHTML = "";
                var table = document.createElement('table'); 
                var table2 = document.createElement('table');

                container.appendChild(table);
                container2.appendChild(table2);

                populateTable(table, powerdata);
                populateTable(table2, energydata);

            }
           
            async  function renderEventTable(tools,datetime) {
                
                var response = await fetch(`/api/Api/GetEvent?table=di_schemas.powerevent&name=${tools}&time=${datetime}`);
                const data = await response.json();

                var table = document.createElement('table'); 
                $('#tableEvent').empty();
                $('#tableEvent').append(table);
                populateTable(table, data);
            }

            function populateTable(table, data) {
                if (data.length === 0) return;

                // 添加表头
                var header = table.createTHead();
                var headerRow = header.insertRow(0);
                var headerCell1 = document.createElement("th");
                var headerCell2 = document.createElement("th");
                var headerCell3 = document.createElement("th");
                headerCell1.textContent = "Name";
                headerCell2.textContent = "Difference";
                headerCell3.textContent = "Time";
                headerRow.appendChild(headerCell1);
                headerRow.appendChild(headerCell2);
                headerRow.appendChild(headerCell3);

                // 先根據 Name 分組數據
                const groupedData = data.reduce((acc, item) => {
                    if (!acc[item.name]) {
                        acc[item.name] = [];
                    }
                    acc[item.name].push(item);
                    return acc;
                }, {});

                // 遍历每一组数据
                Object.keys(groupedData).forEach(name => {
                    let nameData = groupedData[name];

                    // 初始化时间段记录
                    let startTime = nameData[0].datetime;
                    let endTime = nameData[0].datetime;
                    let prevItem = nameData[0];

                    nameData.forEach((item, index) => {
                        let prevDate = new Date(prevItem.datetime);
                        let currDate = new Date(item.datetime);

                        // 检查当前 datetime 是否连续
                        if ((currDate - prevDate) / 1000 <= 60) { // 如果间隔在1分钟以内
                            endTime = item.datetime; // 更新结束时间
                        } else {
                            // 添加上一段时间或单一时间点的记录
                            var row = table.insertRow();
                            var cell1 = row.insertCell(0);
                            var cell2 = row.insertCell(1);
                            var cell3 = row.insertCell(2);
                            cell1.textContent = prevItem.name;
                            cell2.textContent = prevItem.value;
                            if (startTime === endTime) {
                                cell3.textContent = startTime; // 时间不连续，记录单一时间点
                            } else {
                                cell3.textContent = `${startTime} - ${endTime}`; // 时间连续，记录时间段
                            }

                            // 重置开始和结束时间
                            startTime = item.datetime;
                            endTime = item.datetime;
                        }
                        prevItem = item;

                        // 若数据为最后一个，需单独处理最后一个记录
                        if (index === nameData.length - 1) {
                            var row = table.insertRow();
                            var cell1 = row.insertCell(0);
                            var cell2 = row.insertCell(1);
                            var cell3 = row.insertCell(2);
                            cell1.textContent = item.name;
                            cell2.textContent = item.value;
                            if (startTime === endTime) {
                                cell3.textContent = startTime; // 时间不连续，记录单一时间点
                            } else {
                                cell3.textContent = `${startTime} - ${endTime}`; // 时间连续，记录时间段
                            }
                        }
                    });
                });

            }


            function hexToRgba(hex, alpha) {
                hex = hex.replace('#', '');

                var r = parseInt(hex.substring(0, 2), 16);
                var g = parseInt(hex.substring(2, 4), 16);
                var b = parseInt(hex.substring(4, 6), 16);

                return `rgba(${r}, ${g}, ${b}, ${alpha})`;
            }


            function renderPieChart(filteredData) {


                var ctx = document.createElement('canvas');
                ctx.innerHTML = '';
                var labels = filteredData.map(item => item.name);
                var data = filteredData.map(item => item.diff);
                var pie = document.getElementById("pieChart");
                while (pie.firstChild) {
                    pie.removeChild(pie.firstChild);
                }
                pie.appendChild(ctx);
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: labels,
                        datasets: [{
                            data: data,
                            backgroundColor: filteredData.map((item, index) => getRandomColor(index)) // 使用隨機顏色或固定顏色
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (context) {
                                        var label = context.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        label += context.raw;
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            var all = document.getElementById('flexCheckChecked_all');
            all.addEventListener("change", function () {
                if (all.checked) {
                    $('.single').attr("disabled", true); $('.single').attr("checked", false);
                } else {
                    $('.single').attr("disabled", false);
                }
            });
            var date = document.getElementById('date');
            var PowerHis = document.getElementById('historyPowerChart');
            var EnergyHis = document.getElementById('historyEnergyChart');
            var powerTable = document.getElementById('historyPowerTable');
            var energyTable = document.getElementById('historyEnergyTable');


        </script>
    }
</body>
</html>
